       29 addedge!(ag::AttributeGraph, args...) = add_edge!(ag, args...)
        - 
        - "$(TYPEDSIGNATURES) Add a vertex in the graph and push a missing value to the attributes"
       25 function addvertex!(ag::AttributeGraph{T,G,V,E,R}) where {T<:Integer,G<:AbstractGraph{T},V<:AbstractVector,E,R}
       40     res = add_vertex!(getgraph(ag))
       25     res && push!(vertex_attr(ag), missing)
       25     res
        - end
        - 
        - "$(TYPEDSIGNATURES) Remove a vertex from the graph and update all attributes and keys/indices"
        2 function remvertex!(ag::AttributeGraph{T,G,V,E,R}, u::T) where {T<:Integer,G<:AbstractGraph{T},V<:AbstractVector,E<:AbstractDict{<:Tuple{T,T,T}},R}
        -     # find influenced edges
        2     dictedgekeys = [key for key in keys(edge_attr(ag)) if key[1]==u || key[2]==u]
        6     map(dictedgekeys) do dk; delete!(edge_attr(ag), dk) end
        2     res = rem_vertex!(getgraph(ag), u)
        2     res && deleteat!(vertex_attr(ag), u)
        2     updateedgeattr_after_vertex_removal!(ag, u)
        2     res
        - end
        - 
        - "$(TYPEDSIGNATURES) Remove an edge from the graph and update attributes and keys/indices"
        6 function remedge!(ag::AttributeGraph{T,G,V,E,R}, s::T, d::T, m::T=1) where {T<:Integer,G<:AbstractGraph{T},V<:AbstractVector,E<:AbstractDict{<:Tuple{T,T,T}},R}
        -     # find influenced edges
       56     cedg = count(edges(ag)) do ed; s==src(ed) || d==src(ed) end 
        4     if m <= cedg
        4         rem_edge!(getgraph(ag), s, d)
        4         remedgeattr!(ag, s, d, m)
        4         updateedgeattr_after_edge_removal!(ag, s, d, m)
        -     end
        4     nothing
        - end
        - 
        - #
        - #---------------------------------- graph attributes ----------------------------------#
        - #
        - 
        - "$(TYPEDSIGNATURES) Add a graph attribute"
        4 function addgraphattr!(ag::AttributeGraph{T,G,V,E,R}, k::Kr, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,E, Kr, Vr, R<:AbstractDict{Kr, Vr}}
        4     graph_attr(ag)[k] = v
        - end
        - 
        - "$(TYPEDSIGNATURES) Remove a graph attribute"
        - function remgraphattr!(ag::AttributeGraph{T,G,V,E,R}, k::Kr) where {T<:Integer,G<:AbstractGraph{T},V,E, Kr, R<:AbstractDict{Kr}}
        -     delete!(graph_attr(ag),k)
        - end
        - 
        - "$(TYPEDSIGNATURES) Check if graph has this attribute"
        - function hasgraphattr(ag::AttributeGraph{T,G,V,E,R}, k::Kr) where {T<:Integer,G<:AbstractGraph{T},V,E, Kr, R<:AbstractDict{Kr}}
        -     haskey(graph_attr(ag), k)
        - end
        - 
        - "$(TYPEDSIGNATURES) Get graph attribute"
        - function getgraphattr(ag::AttributeGraph{T,G,V,E,R}, k::Kr) where {T<:Integer,G<:AbstractGraph{T},V,E, Kr, R<:AbstractDict{Kr}}
        -     graph_attr(ag)[k]
        - end
        - 
        - #
        - #---------------------------------- vertex attributes ----------------------------------#
        - #
        - 
        - "$(TYPEDSIGNATURES) Add vertex attribute"
        6 function addvertexattr!(ag::AttributeGraph{T,G,V,E}, k::T, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,E, Vr}
        6     has_vertex(ag, k) ? (vertex_attr(ag)[k] = v) : nothing
        - end
        - 
        - "$(TYPEDSIGNATURES) Remove vertex attribute"
        - function remvertexattr!(ag::AttributeGraph{T,G,V,E}, k::T) where {T<:Integer,G<:AbstractGraph{T},V,E}
        -     has_vertex(ag, k) ? (vertex_attr(ag)[k] = missing) : nothing
        - end
        - 
        - "$(TYPEDSIGNATURES) Check if vertex has this attribute"
        - function hasvertexattr(ag::AttributeGraph{T,G,V,E}, k::T) where {T<:Integer,G<:AbstractGraph{T},V,E}
        -     length(vertex_attr(ag)) >= k && !ismissing(vertex_attr(ag)[k])
        - end
        - 
        - "$(TYPEDSIGNATURES) Get vertex attribute"
        - function getvertexattr(ag::AttributeGraph{T,G,V,E}, k::T) where {T<:Integer,G<:AbstractGraph{T},V,E}
        -     vertex_attr(ag)[k]
        - end
        - 
        - #
        - #---------------------------------- edge attributes ----------------------------------#
        - #
        - 
        - "$(TYPEDSIGNATURES)"
       12 function _addedgeattr!(ag::AttributeGraph{T,G,V,E}, k::Kr, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,Vr,E<:AbstractDict{Kr, Vr}}
       12     edge_attr(ag)[k] = v
        - end
        - "$(TYPEDSIGNATURES) Add edge attribute `v` for edge defined by source `s` and destination `d`"
       11 function addedgeattr!(ag::AttributeGraph{T,G,V,E}, s::T, d::T, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,Vr,E<:AbstractDict{Kr, Vr}}
       11     has_edge(ag, s, d) ? _addedgeattr!(ag, (s,d,1), v) : nothing
        - end
        - "$(TYPEDSIGNATURES) Add edge attribute `v` for edge defined by source `s`, destination `d` and multiplicity `m`."
        3 function addedgeattr!(ag::AttributeGraph{T,G,V,E}, s::T, d::T, m::T, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,Vr,E<:AbstractDict{Kr, Vr}}
        3     has_edge(ag,s,d,m) ? _addedgeattr!(ag, (s,d,m), v) : nothing
        - end
        - "$(TYPEDSIGNATURES) Add edge attribute `v` for edge `e`"
        - function addedgeattr!(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,Vr,E<:AbstractDict{Kr, Vr}}
        -     addedgeattr!(ag, src(e), dst(e), v)
        - end
        - "$(TYPEDSIGNATURES) Add edge attribute `v` for edge `e` and multiplicity `m`."
        - function addedgeattr!(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge, m::T, v::Vr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,Vr,E<:AbstractDict{Kr, Vr}}
        -     addedgeattr!(ag, src(e), dst(e), m, v)
        - end
        - 
        - "$(TYPEDSIGNATURES)"
        4 function _remedgeattr!(ag::AttributeGraph{T,G,V,E}, k::Kr) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}}
        4     delete!(edge_attr(ag),k)
        - end
        - "$(TYPEDSIGNATURES) Remove edge attribute for edge defined by source `s` and destination `d`"
        - function remedgeattr!(ag::AttributeGraph{T,G,V,E}, s::T, d::T) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}}
        -     _remedgeattr!(ag, (s,d,1))
        - end
        - "$(TYPEDSIGNATURES) Remove edge attribute for edge defined by source `s`, destination `d` and multiplicity `m`."
        4 function remedgeattr!(ag::AttributeGraph{T,G,V,E}, s::T, d::T, m::T) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}}
        4     _remedgeattr!(ag, (s,d,m))
        - end
        - "$(TYPEDSIGNATURES) Remove edge attribute for edge `e`"
        - function remedgeattr!(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}}
        -     _remedgeattr!(ag, (src(e),dst(e),1))
        - end
        - "$(TYPEDSIGNATURES) Remove edge attribute for edge `e` and multiplicity `m`"
        - function remedgeattr!(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge, m::T) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}}
        -     _remedgeattr!(ag, (src(e),dst(e),m))
        - end
        - 
        - "$(TYPEDSIGNATURES) Get edge attribute for edge defined by source `s` and destination `d`"
        - getedgeattr(ag::AttributeGraph{T,G,V,E}, s::T, d::T) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}} = edge_attr(ag)[s,d,1]
        - "$(TYPEDSIGNATURES) Get edge attribute for edge defined by source `s` and destination `d` and multiplicity `m`"
        - getedgeattr(ag::AttributeGraph{T,G,V,E}, s::T, d::T, m::T) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}} = edge_attr(ag)[s,d,m]
        - "$(TYPEDSIGNATURES) Get edge attribute for edge defined by `e`"
        - getedgeattr(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge) where {T<:Integer,G<:AbstractGraph{T},V,E<:AbstractDict} = getedgeattr(ag, src(e), dst(e))
        - "$(TYPEDSIGNATURES) Get edge attribute for edge defined edge `e` with multiplicity `m`"
        - getedgeattr(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge, m::T) where {T<:Integer,G<:AbstractGraph{T},V,E<:AbstractDict} = getedgeattr(ag, src(e), dst(e), m)
        - 
        - "$(TYPEDSIGNATURES) Check if edge has attribute for edge defined by the arguments `args` given as a tuple"
        - hasedgeattr(ag::AttributeGraph{T,G,V,E}, args::T...) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}} = haskey(edge_attr(ag), args)
        - "$(TYPEDSIGNATURES) Check if edge has attribute for edge defined by the tuple `ktup`"
        - hasedgeattr(ag::AttributeGraph{T,G,V,E}, ktup::Tuple) where {T<:Integer,G<:AbstractGraph{T},V,Kr,E<:AbstractDict{Kr}} = haskey(edge_attr(ag), ktup)
        - "$(TYPEDSIGNATURES) Check if edge has attribute for edge `e`"
        - hasedgeattr(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge) where {T<:Integer,G<:AbstractGraph{T},V,E<:AbstractDict} = hasedgeattr(ag, src(e), dst(e))
        - "$(TYPEDSIGNATURES) Check if edge has attribute for edge `e` and multiplicity `m`"
        - hasedgeattr(ag::AttributeGraph{T,G,V,E}, e::AbstractEdge, m::T) where {T<:Integer,G<:AbstractGraph{T},V,E<:AbstractDict} = hasedgeattr(ag, src(e), dst(e), m)
        - 
        - #
        - #---------------------------------- helpful functions ----------------------------------#
        - #
        - 
        2 function updateedgeattr_after_vertex_removal!(ag::AttributeGraph{T,G,V,E}, u::T) where {T<:Integer, G<:AbstractGraph{T}, V, E<:AbstractDict{<:Tuple{T,T,T}}}
        8     movedownone(x, u) = x > u ? x-1 : x
        4     movedownonemany(v, u) = (movedownone.(v[1:2], u)..., v[3])
        - 
        2     keystochange = [(s,t,m) for (s,t,m) in keys(edge_attr(ag)) if s > u || t > u]
        4     holdvalues = getindex.([edge_attr(ag)], keystochange)
        4     newkeys = movedownonemany.(keystochange, u)
        - 
        6     foreach(keystochange) do k; delete!(edge_attr(ag), k); end
        4     foreach(zip(newkeys, holdvalues)) do (k,v); edge_attr(ag)[k]= v; end
        - end
        4 function updateedgeattr_after_edge_removal!(ag::AttributeGraph{T,G,V,E}, s::T, d::T, m::T) where {T<:Integer, G<:AbstractGraph{T}, V, E<:AbstractDict{<:Tuple{T,T,T}}}
        6     movedownonemany(v) = (v[1:2]..., v[3]-1)
        - 
        4     keystochange = [(v1,v2,mu) for (v1,v2,mu) in keys(edge_attr(ag)) if s == v1 && d == v2 && mu>m]
        8     holdvalues = getindex.([edge_attr(ag)], keystochange)
        8     newkeys = movedownonemany.(keystochange)
        - 
        4     keystochange, holdvalues, newkeys
        - 
        7     foreach(keystochange) do k; delete!(edge_attr(ag), k); end
        6     foreach(zip(newkeys, holdvalues)) do (k,v); edge_attr(ag)[k]= v; end
        - end
